#warning these python functions may be to cool and result in your eyes burning... yep deffinetly because they are good and not bad.
import mysql.connector # how we connect to data base(WARNING THE PIP INSTALL FOR THIS IS NOT mysql-connector. IT IS mysql-connector-python.)
import bcrypt # what we will be using to hash and salt our passwords

mydb = mysql.connector.connect( # we establish a connection with the data base
    host = "localhost",
    user = "root",
    password = "examplepas",
    database = "test"
)
cursor = mydb.cursor()
#cursor.execute("select users_name,users_id from users;")
#for (users_name,users_id) in cursor:
#    print("{}, {} {:%d %b}".format(
#    users_name,users_id))
#cursor.execute("insert into product (product_name,price,stock) values ('Berald',10,5);") #insert works! Must have commit statement! automatically starts a transaction 
#cursor.execute("set transaction isolation level serializable;")#makes it so that read also sets locks on insertion
#cursor.execute("start transaction;")
#query = "select * from product where price = %s;"
#price = (99,)
#cursor.execute(query,(price))
#result = cursor.fetchall()
#mydb.commit() #commit fully commits through all levels of transactions
#for row in result:
#    product_id,product_name,price,stock = row
#    print(product_id)

# Function to hash a password
def hash_password(password):
    salt = bcrypt.gensalt()#generates a salt
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), salt)# Hashs the password with the salt after converting it into binary
    return hashed_password #returns the now hased password

# Function to check a password
def check_password(password, hashed_password):
    return bcrypt.checkpw(password.encode('utf-8'), hashed_password)#turns the password into binary and then compares it with the hashed password

# Function to create a cart and update current cart given a users id.
def create_cart_for_user(users_id):
    q3 = "insert into cart (users_id) values (%s);"
    q4 = "update users set current_cart_id = (select max(cart_id) from cart where cart.users_id = users.users_id) where users_id = %s;"
    cursor.execute(q3,(users_id,))
    cursor.execute(q4,(users_id,))
    # DO NOT PUT A COMIT IN FUNCTION. We only create a new cart for a user, when a new user is created, or if the users previous cart has been used for a sale.
    #The comit will occur within those functions!
    return


#Create New User ex.
def create_user(input_name,input_email,input_password):
    input_password = hash_password(input_password) #hash our example password
    users_data = (input_name,input_email,input_password)
    q1 = "insert into users (users_name,users_email,users_password)values (%s,%s,%s);" #list of sql queries we are using
    q2 = "select users_id from users where users_email = %s;"
    cursor.execute("start transaction;")
    cursor.execute(q1,(users_data)) # create the user with passed param
    cursor.execute(q2,(input_email,)) # find the user Id of the user just created
    result = cursor.fetchall() #should always return only 1 row
    for row in result:
        users_id = row
        current_users_id = users_id[0] #user id to store in session (will be returned by function if we want to automatically log someone in to the account they created.)
    create_cart_for_user(current_users_id); # create a cart for the new user we just created
    mydb.commit()
    return current_users_id

# check out for a users current cart given user id
def check_out_user(users_id):
    # take user to check out page. and display information obtained bellow [IMPORTANT]
    total_cost = 0.0 # Initializing our total cost that will be displayed later
    uid = users_id # i dont know if this needs to be here or how pointers work in python lol.
    cursor.execute("set transaction isolation level serializable;") #step 1 set transaction level
    cursor.execute("start transaction;") #step 2 start that transaction
    q1 = "select current_cart_id from users where users_id = %s;" # query used for finding the users current cart id
    q2 = "select product_name,product_pair.product_id,product_amount, price from product_pair join product on product_pair.product_id = product.product_id where product_pair.cart_id = %s;" # find all product information that exists inside of that carts product pairs (name,id,amount,price) using cart id
    q3 = "insert into sale (cart_id,payment_method,total_amount) values(%s,%s,%s);" # the query used for inserting the current cart into sale (insert cart id, payment method, total_cost)
    q4 = "update sale set payment_complete = true where cart_id = %s;" # sets the payment complete in sale to true once payment is (pretended to be) recieved.
    cursor.execute(q1,(uid,))
    result = cursor.fetchall()
    for row in result:
        cart_id = row
        cid = cart_id[0] # cid is the current cart id which will be used for the sale
    print (cid)
    cursor.execute(q2,(cid,)) # run that query
    for (product_name,product_id,product_amount,product_cost) in cursor: # For all product pairs inside of our users current cart
        print("Product_name = {},id = {},quantity = {}, cost = {}".format(product_name,product_id,product_amount,product_cost)) # Display this information to the webpage user.
        temp_cost = product_cost * product_amount # find the total cost of the product pair found (product cost * product amount)
        total_cost = total_cost + temp_cost # add that amount to the total cost
    print("the total is {}".format(total_cost))# Display this information to the webpage user. [IMPORTANT]

    pretend_payment = "Credit(1101-...)" #Payment method used on the check out screen. [IMPORTANT]
    # await user input. If the user wants to cancel or CONTINUE [IMPORTANT]

    users_cancel = False# if user cancel sale
    if(users_cancel):
        mydb.rollback()# roll back to remove locks
        return# leave sale page and leave function

    #otherwise continue
    cursor.execute(q3,(cid,pretend_payment,total_cost)) # insert the cart id, payment method, and total cost of purchase, into sale (date, time and other data is set automatically)
    # pretend code to see if payment is recieved...
    #if payment isnt recieved roll back.
    #if the payment is recieved!
    cursor.execute(q4,(cid,)) # updates the sale payment recieved to true
    create_cart_for_user(uid,) # create a new cart for user, and set that to be the current cart.
    mydb.commit()
    return


# main
# user_id = create_user("Rich3","Rich3'sbadpassword","Rich3@exampleemail.com")#user name email password
# print (user_id)
#check_out_user(3)


cursor.close()
mydb.close()



# This is me testing using git on my pc
